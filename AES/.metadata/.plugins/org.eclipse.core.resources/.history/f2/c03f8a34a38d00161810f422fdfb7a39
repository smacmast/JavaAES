/**
 * @author Spencer MacMaster
 * @name: AESAlgo.java
 * @description: Java implementation of FIPS-197 ADVANCED ENCRYPTION STANDARD (AES) Algorithms.
 **/

public class AESAlgo {

	//|-------------------|AES VARIABLES|-----------------|\\

	private final int blockSize;
	private final int Nk;  //Number of 32-bit words comprising the Cipher Key. FIPS-197 standard, Nk = 4, 6, or 8.
	private final int Nb;  //Number of columns (32-bit words) comprising the State. FIPS-197 standard, Nb = 4.
	private final int Nr; //Number of rounds
	
	private char[] Key;
	private char[] in;
	private char[] out;
	private char[][] state;
	private char[] RoundKey;
	
	//Round Constant Array
	private final int[] rcon = new int[]{
		0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
		0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
		0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
		0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
		0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
		0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
		0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
		0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
		0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
		0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
		0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
		0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
		0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
		0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
		0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb };
    
	//Non-linear substitution table used to perform a one-for-one substitution of a byte value
	private final int[][] sbox = new int[][]{
            { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 },  
            { 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 },   
            { 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 },   
            { 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 },   
            { 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 },   
            { 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf },   
            { 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 },   
            { 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 },   
            { 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 },   
            { 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb },   
            { 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 },   
            { 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 },   
            { 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a },   
            { 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e },   
            { 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf },	  
            { 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 } };

	//inverse of sbox array
	private final int[][] rsbox = new int[][]{ 
            { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb },
            { 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb },
            { 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e },
            { 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 },
            { 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 },
            { 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 },
            { 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 },
            { 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b },
            { 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 },
            { 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e },
            { 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b },
            { 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 },
            { 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f },
            { 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef },
            { 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 },
            { 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d } };
	
	//|-------------------|CONSTRUCTORS|------------------|\\
	
	/*General Constructor Function*/
	public AESAlgo() { 
		this.blockSize = 128; this.Nk = this.blockSize / 32;
		this.Nr = this.Nk + 6; this.Nb = 4; 
		this.Key = new char[Nk*4]; this.state = new char[4][4];
		this.in = new char[16]; this.out = new char[16];
		this.RoundKey = new char[240];
	}
	
	/*Overloaded Constructor Function*/
	public AESAlgo(int block){ 
		this.blockSize = block; this.Nk = block / 32; 
		this.Nr = this.Nk + 6; this.Nb = 4; 
		this.Key = new char[Nk*4]; this.state = new char[4][4];
		this.in = new char[16]; this.out = new char[16];
		this.RoundKey = new char[240];

	}

	//|---------------|AES PUBLIC FUNCTIONS|--------------|\\

	/*Function that applies a basic block cipher to the plain text and returns an encrypted version*/
	public String Encrypt(String plaintxt, String key) {
		StringBuilder ciphertxt = new StringBuilder();
		this.Key = key.toCharArray();

		KeyExpansion();

		plaintxt = addPad(plaintxt);
		for (int i = 0; i < plaintxt.length(); i += 16){
			System.out.println(plaintxt.substring(i, i+16));
			this.in = plaintxt.substring(i, i+16).toCharArray(); //Populate the in array
			Cipher();
			ciphertxt.append(array2str(this.out));
		}//*/
		
		return ciphertxt.toString();
		//return ciphertxt.toString();
	}

	/*Function that applies a basic inverse block cipher to the encrypted text and returns an plain text version*/
	public String Decrypt(String ciphertxt, String key) {
		StringBuilder plaintxt = new StringBuilder();
		this.Key = key.toCharArray();			
		KeyExpansion();
		
		for (int i = 0; i < ciphertxt.length(); i += 16){
			this.in = ciphertxt.substring(i, i+16).toCharArray(); //Populate the in array
			InvCipher();
			plaintxt.append(array2str(this.out));
		}

		return delPad(plaintxt.toString());
	}

	//|--------------|AES PRIVATE FUNCTIONS|--------------|\\
	
	/*Function that takes two numbers and returns the sbox value*/
	private int getSBoxValue(int num1, int num2){ return this.sbox[num1][num2]; }
	
	/*Function that takes two numbers and returns the rsbox value*/
	private int getSBoxValueInvert(int num1, int num2){ return rsbox[num1][num2]; }

	/*Function used to generate a series of Round Keys from the Cipher Key.*/
	private void KeyExpansion(){
		char[] temp = new char[4]; 
		int i = 0, j = 0;
		System.out.println("148 Here");
		//First roundKey is key itself
		for (i = 0; i < this.Nk; ++i){
			this.RoundKey[i*4+0] = this.Key[i*4+0]; this.RoundKey[i*4+1] = this.Key[i*4+1];
			this.RoundKey[i*4+2] = this.Key[i*4+2]; this.RoundKey[i*4+3] = this.Key[i*4+3];
		}
		System.out.println("154 Here");

		// All other round keys are derived from the previous round keys.
		for (i = i + 0; j < (Nb * (Nr+1)); ++i){
			for(j=0;j<4;j++){ temp[j]=RoundKey[(i-1) * 4 + j];}
			
			if (i % Nk == 0){ RotWord(temp); SubWord(temp); temp[0] = (char)((int)(temp[0]) ^ this.rcon[i/Nk]); }
			else if (Nk > 6 && i % Nk == 4){SubWord(temp);}
			
			for (j = 0; j < 4; j++){ this.RoundKey[i*4+j] = (char) ((int)this.RoundKey[(i-Nk)*4+j] ^ (int)temp[j]);}
		}
		System.out.println("165 Here");

	}
	
	private void KeyExpansion2(){
		int i, j;
		char[] word = new char[4];
		char k;

		// The first round key is the key itself.
		for (i = 0; i < Nk; ++i){
			this.RoundKey[i * 4 + 0] = this.Key[i + 0 * 4]; this.RoundKey[i * 4 + 1] = this.Key[i * 4 + 1];
			this.RoundKey[i * 4 + 2] = this.Key[i * 4 + 2]; this.RoundKey[i * 4 + 3] = this.Key[i * 4 + 3];
		}

		// All other round keys are found from the previous round keys.
		while (i < (Nb * (Nr + 1)))
		{
			for (j = 0; j<4; j++) { word[j] = this.RoundKey[(i - 1) * 4 + j]; }
			
			if (i % this.Nk == 0) {
				RotWord(word);	SubWord(word);
				word[0] = (char) (word[0] ^ this.rcon[i / Nk]);
			}
			
			else if (this.Nk > 6 && i % this.Nk == 4){ SubWord(word); }

			this.RoundKey[i * 4 + 0] = (char) (this.RoundKey[(i - Nk) * 4 + 0] ^ word[0]);
			this.RoundKey[i * 4 + 1] = (char) (this.RoundKey[(i - Nk) * 4 + 1] ^ word[1]);
			this.RoundKey[i * 4 + 2] = (char) (this.RoundKey[(i - Nk) * 4 + 2] ^ word[2]);
			this.RoundKey[i * 4 + 3] = (char) (this.RoundKey[(i - Nk) * 4 + 3] ^ word[3]);
			++i;
		}
	}

	/*Function which adds the RoundKey to the State by a bitwise XOR op. Each Round Key consists of Nb words from the key schedule*/
	private void AddRoundKey(int round){
		for (int i = 0; i < 4; ++i){
			for (int j = 0; j < 4; ++j){
				this.state[j][i] = (char) (this.state[j][i] ^ this.RoundKey[round * this.Nb * 4 + i * this.Nb + j]);
			}
		}
	}

	//Function that takes all of the columns of the State and mixes their data (independently of one another) to produce new columns//
	private void MixColumns(){
		char Tmp, Tm, t;
		for (int i = 0; i<4; i++)
		{
			t = this.state[0][i];
			Tmp = (char) (this.state[0][i] ^ this.state[1][i] ^ this.state[2][i] ^ this.state[3][i]);
			
			Tm = (char) (this.state[0][i] ^ this.state[1][i]);  Tm = (char) xtime(Tm); 
			this.state[0][i]  = (char) (this.state[0][i] ^ (Tm ^ Tmp));
			
			Tm = (char) (this.state[1][i] ^ this.state[2][i]); Tm = (char) xtime(Tm);
			this.state[1][i]  = (char) (this.state[1][i] ^ (Tm ^ Tmp));
			
			Tm = (char) (this.state[2][i] ^ this.state[3][i]); Tm = (char) xtime(Tm);
			this.state[2][i] = (char) (this.state[2][i] ^ (Tm ^ Tmp));
			
			Tm = (char) (this.state[3][i] ^ t); Tm = (char) xtime(Tm);
			this.state[3][i] = (char) (this.state[3][i] ^ (Tm ^ Tmp));
		}
	}

	/*Function that does the inverse of MixColumns*/
	private void InvMixColumns(){
		char a, b, c, d;
		for (int i = 0; i<4; ++i) {
			a = state[0][i];
			b = state[1][i];
			c = state[2][i];
			d = state[3][i];

			state[0][i] = (char) (Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09));
			state[1][i] = (char) (Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d));
			state[2][i] = (char) (Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b));
			state[3][i] = (char) (Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e));
		}
	}

	/*Function that cyclically shifts the last three rows left in the state array.*/
	private void ShiftRows(){
		//zeroth row remains the same
	    //row0 [0][1][2][3] --> [0][1][2][3]
	    
	    //Shift the first row left 1
	    //row1 [0][1][2][3] --> [1][2][3][0]
	    char temp = this.state[1][0];
	    this.state[1][0] = this.state[1][1];
	    this.state[1][1] = this.state[1][2];
	    this.state[1][2] = this.state[1][3];
	    this.state[1][3] = temp;

	    //Shift the second row left 2
	    //row2 [0][1][2][3] --> [2][3][0][1]
	    temp = this.state[2][0];
	    this.state[2][0] = this.state[2][2];
	    this.state[2][2] = temp;
	    temp = this.state[2][1];
	    this.state[2][1] = this.state[2][3];
	    this.state[2][3] = temp;

	    //Shift the third row left 3
	    //row3 [0][1][2][3] --> [3][0][1][2]
	    temp = this.state[3][0];
	    this.state[3][0] = this.state[3][3];
	    this.state[3][3] = this.state[3][2];
	    this.state[3][2] = this.state[3][1];
	    this.state[3][1] = temp;
	}

	/*Function that undoes ShiftRows.*/
	private void InvShiftRows(){
	    //Zeroth row remains the same
	    //row0 [0][1][2][3] --> [0][1][2][3]
	    
	    //Shift the first row right 1
	    //row1  [1][2][3][0] --> [0][1][2][3]
	    char temp = this.state[1][3];
	    this.state[1][3] = this.state[1][2];
	    this.state[1][2] = this.state[1][1];
	    this.state[1][1] = this.state[1][0];
	    this.state[1][0] = temp;

	    //Shift the second row right 2
	    //row2  [2][3][0][1] --> [0][1][2][3]
	    temp = this.state[2][0];
	    this.state[2][0] = this.state[2][2];
	    this.state[2][2] = temp;
	    temp = this.state[2][1];
	    this.state[2][1] = this.state[2][3];
	    this.state[2][3] = temp;

	    //Shift the third row right 3
	    //row3  [3][0][1][2] --> [0][1][2][3]
	    temp = this.state[3][0];
	    this.state[3][0] = this.state[3][1];
	    this.state[3][1] = this.state[3][2];
	    this.state[3][2] = this.state[3][3];
	    this.state[3][3] = temp;
	}

	/*Function that modifies the state array by the values in sbox.*/
	private void SubBytes(){
		int num1 = 0, num2 = 0;
		for (int i = 0; i < 4; ++i){
		    for (int j = 0; j < 4; ++j){
		        num1 = (int)(this.state[j][i]) >> 4 & 0x0f;
		        num2 = (int)(this.state[j][i]) & 0x0f;
		        this.state[j][i] = (char) getSBoxValue(num1,num2);
		    }
		}
	}

	/*Function that undoes SubBytes.*/
	private void InvSubBytes(){
		int num1 = 0, num2 = 0;
		for (int i = 0; i < 4; ++i){
		    for (int j = 0; j < 4; ++j){
		        num1 = (int)(this.state[j][i]) >> 4 & 0x0f;
		        num2 = (int)(this.state[j][i]) & 0x0f;
		        this.state[j][i] = (char) getSBoxValueInvert(num1,num2);
		    }
		}
	}

	/*Function that takes a word [a0,a1,a2,a3] as input rotates it left [a1,a2,a3,a0].*/
	private void RotWord(char[] word){
	    char temp = word[0];
	    word[0] = word[1]; word[1] = word[2];
	    word[2] = word[3]; word[3] = temp;
	}

	/*Function that takes a four-byte input word and applies the S-box.*/
	private void SubWord(char[] word){
		int num1,num2;
		for (int i = 0; i < word.length; ++i){
	        num1 = (int)(word[i]) >> 4 & 0x0f;
	        num2 = (int)(word[i]) & 0x0f;
	        word[i] = (char) getSBoxValue(num1,num2);
	    }
	}

	/*Function that encrypts a 16-Char Block of text according to the FIPS-197 AES Specifications*/
	private void Cipher(){
		//word is an array of size Nb*(Nr+1)
		in2state(); //state = in;
		
		int round = 0;
		AddRoundKey(round);

		for(round = 1; round < this.Nr; ++round){
			SubBytes();
			ShiftRows();
			MixColumns();
			AddRoundKey(round);
		}
		SubBytes();
		ShiftRows();
		AddRoundKey(round);
		
		state2out(); //out = state
	}

	/*Function that decrypts a 16-Char Block of text according to the FIPS-197 AES Specifications*/
	private void InvCipher(){
		//word is an array of size Nb*(Nr+1)
		in2state(); //state = in;
		
		int round = this.Nr;
		AddRoundKey(round);

		for(round = Nr-1; round > 0; --round){
			InvShiftRows();
			InvSubBytes();

			AddRoundKey(round);
			InvMixColumns();
		}
		InvShiftRows();
		InvSubBytes();
		AddRoundKey(round);
		
		state2out(); //out = state
	}
		
	//|---------------|MISC HELPER FUNCTIONS|-------------|\\
	
	/*xtime is a function that finds the product of {02} and the argument to xtime modulo {1b}*/
	private int  xtime(int x){
		return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
	}
	
	/* Multiply is a function used to multiply numbers in the field GF(2^8)*/
	private int  Multiply(int x, int y){
		int l = ((y & 1) * x) ^ ((y>>1 & 1) * xtime(x)) ^ ((y>>2 & 1) * xtime(xtime(x)));
		int r = ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^ ((y>>4 & 1) * xtime(xtime(xtime(xtime(x)))));
		return l ^ r;
	}

	/*Adds padding to the input string and returns it following char PKCS7Padding^*/
	private String addPad(String str){
		StringBuilder s = new StringBuilder();
		//^modified version not for actual use
		int offset = 127, len = str.length(), padVal = ((16-(len % 16)) + offset);

		s.append(str);
		if(padVal != offset && padVal != 16 + offset){ for (int i = offset; i < padVal; ++i){s.append((char) (padVal)); }}//padding required

		return s.toString();
	}
	
	/*Removes padding to the input string and returns it following PKCS7Padding*/
	private String delPad(String str){
		int len = str.length(), offset = 127, padVal = (int) str.charAt(len-1) - offset;

		if (padVal < 16){str = str.substring(0, len-padVal); } //returns string without padding text

		return str;
	}
		
	/*Populates the State matrix with the values from the in array*/
	private void in2state(){
		for(int i = 0; i < 4; ++i){
			this.state[i][0] = this.in[4*i+0];
			this.state[i][1] = this.in[4*i+1];
			this.state[i][2] = this.in[4*i+2];
			this.state[i][3] = this.in[4*i+3];
		}
	}
	
	/*Populates the out array with the values from the state matrix*/
	private void state2out(){
		for(int i = 0; i < 4; ++i){
			this.out[4*i+0] = this.state[i][0];
			this.out[4*i+1] = this.state[i][1];
			this.out[4*i+2] = this.state[i][2];
			this.out[4*i+3] = this.state[i][3];
		}
	}

	/*Returns a string representation of the array*/
	private String array2str(char[] array){
		StringBuilder s = new StringBuilder();
		
		for (int i = 0; i < array.length; ++i){ s.append(array[i]); }
		
		return s.toString();
	}
	
}
